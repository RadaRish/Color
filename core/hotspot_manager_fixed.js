export default class HotspotManager {
  constructor() {
    this.viewerManager = null; // –ë—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–∑–∂–µ
    this.hotspots = [];
    this.sceneManager = null; // –ë—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–∑–∂–µ
  }

  setViewerManager(viewerManager) {
    this.viewerManager = viewerManager;
  }

  setSceneManager(sceneManager) {
    this.sceneManager = sceneManager;
  }

  addHotspot(scene, hotspotData) {
    const id = `hotspot_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
    console.log('üéØ –°–æ–∑–¥–∞–µ–º —Ö–æ—Ç—Å–ø–æ—Ç —Å –¥–∞–Ω–Ω—ã–º–∏:', hotspotData);
    console.log('üéØ –ü–æ–∑–∏—Ü–∏—è –≤ hotspotData:', hotspotData.position);

    // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø–æ–∑–∏—Ü–∏—é –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º —Ö–æ—Ç—Å–ø–æ—Ç–∞
    let normalizedPosition;
    if (typeof hotspotData.position === 'string') {
      const coords = hotspotData.position.split(' ').map(c => parseFloat(c) || 0);
      normalizedPosition = { x: coords[0] || 0, y: coords[1] || 0, z: coords[2] || 0 };
    } else if (hotspotData.position && typeof hotspotData.position === 'object') {
      normalizedPosition = hotspotData.position;
    } else {
      normalizedPosition = { x: 0, y: 0, z: -5 };
    }

    const newHotspot = {
      id,
      sceneId: scene.id,
      ...hotspotData,
      position: normalizedPosition
    };
    console.log('üéØ –§–∏–Ω–∞–ª—å–Ω—ã–π —Ö–æ—Ç—Å–ø–æ—Ç:', newHotspot);
    console.log('üéØ –ü–æ–∑–∏—Ü–∏—è –≤ newHotspot:', newHotspot.position);

    this.hotspots.push(newHotspot);
    scene.hotspots.push(newHotspot); // –¢–∞–∫–∂–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å—Ü–µ–Ω–µ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏

    this.viewerManager.createVisualMarker(newHotspot);

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage
    this.saveToStorage();

    console.log('–•–æ—Ç—Å–ø–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω:', newHotspot);
  }

  updateHotspot(hotspotId, data) {
    const hotspot = this.findHotspotById(hotspotId);
    if (!hotspot) return;

    Object.assign(hotspot, data);
    this.viewerManager.updateVisualMarker(hotspot);

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage
    this.saveToStorage();

    console.log('–•–æ—Ç—Å–ø–æ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω:', hotspot);
  }

  updateHotspotPosition(hotspotId, position) {
    const hotspot = this.findHotspotById(hotspotId);
    if (!hotspot) {
      console.warn('–•–æ—Ç—Å–ø–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏:', hotspotId);
      return;
    }

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –ø–æ–∑–∏—Ü–∏—é –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    let normalizedPosition;
    if (position && typeof position === 'object') {
      if (position.x !== undefined && position.y !== undefined && position.z !== undefined) {
        // A-Frame –ø–æ–∑–∏—Ü–∏—è –æ–±—ä–µ–∫—Ç - –∏–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
        normalizedPosition = {
          x: parseFloat(position.x) || 0,
          y: parseFloat(position.y) || 0,
          z: parseFloat(position.z) || 0
        };
      } else {
        // –£–∂–µ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç
        normalizedPosition = position;
      }
    } else if (typeof position === 'string') {
      // –°—Ç—Ä–æ–∫–æ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è "x y z"
      const coords = position.split(' ').map(c => parseFloat(c) || 0);
      normalizedPosition = { x: coords[0] || 0, y: coords[1] || 0, z: coords[2] || 0 };
    } else {
      console.warn('üíæ –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–æ–∑–∏—Ü–∏–∏:', position);
      normalizedPosition = { x: 0, y: 0, z: -5 };
    }

    hotspot.position = normalizedPosition;
    console.log('üíæ –ü–æ–∑–∏—Ü–∏—è —Ö–æ—Ç—Å–ø–æ—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞:', hotspotId, normalizedPosition);
    console.log('üíæ –¢–∏–ø –ø–æ–∑–∏—Ü–∏–∏:', typeof normalizedPosition, '–ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä:', normalizedPosition?.constructor?.name);
    console.log('üíæ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–æ–∑–∏—Ü–∏–∏:', JSON.stringify(normalizedPosition));

    // –¢–∞–∫–∂–µ –æ–±–Ω–æ–≤–ª—è–µ–º –≤ —Å–≤—è–∑–∞–Ω–Ω–æ–π —Å—Ü–µ–Ω–µ
    if (this.sceneManager) {
      const scene = this.sceneManager.getSceneById(hotspot.sceneId);
      if (scene) {
        const sceneHotspot = scene.hotspots.find(h => h.id === hotspotId);
        if (sceneHotspot) {
          sceneHotspot.position = normalizedPosition;
        }
      }
    }

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage
    this.saveToStorage();
  }

  removeHotspotById(hotspotId) {
    const index = this.hotspots.findIndex(h => h.id === hotspotId);
    if (index === -1) return;

    const hotspot = this.hotspots[index];

    // –£–¥–∞–ª—è–µ–º –∏–∑ –º–∞—Å—Å–∏–≤–∞ —Ö–æ—Ç—Å–ø–æ—Ç–æ–≤
    this.hotspots.splice(index, 1);

    // –¢–∞–∫–∂–µ —É–¥–∞–ª—è–µ–º –∏–∑ —Å–≤—è–∑–∞–Ω–Ω–æ–π —Å—Ü–µ–Ω—ã
    if (this.sceneManager) {
      const scene = this.sceneManager.getSceneById(hotspot.sceneId);
      if (scene && scene.hotspots) {
        const sceneIndex = scene.hotspots.findIndex(h => h.id === hotspotId);
        if (sceneIndex !== -1) {
          scene.hotspots.splice(sceneIndex, 1);
        }
      }
    }

    // –£–¥–∞–ª—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω—ã–π –º–∞—Ä–∫–µ—Ä
    if (this.viewerManager) {
      this.viewerManager.removeVisualMarker(hotspotId);
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    this.saveToStorage();

    console.log('–•–æ—Ç—Å–ø–æ—Ç —É–¥–∞–ª–µ–Ω:', hotspotId);
  }

  editHotspot(hotspotId) {
    const hotspot = this.findHotspotById(hotspotId);
    if (!hotspot) {
      console.warn('–•–æ—Ç—Å–ø–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', hotspotId);
      return;
    }

    // –í—ã–∑—ã–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–∞—Ä–∫–µ—Ä–∞
    if (window.editMarker) {
      window.editMarker(hotspotId);
    } else {
      console.warn('–§—É–Ω–∫—Ü–∏—è editMarker –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    }
  }

  removeHotspotByMarkerId(markerId) {
    // –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Ö–æ—Ç—Å–ø–æ—Ç–∞ –∏–∑ ID –º–∞—Ä–∫–µ—Ä–∞
    const hotspotId = markerId.replace('marker-', '');
    this.removeHotspotById(hotspotId);
  }

  findHotspotById(id) {
    const hotspot = this.hotspots.find(h => h.id === id);
    if (hotspot && hotspot._needsVideoRestore && !hotspot.videoUrl) {
      // –õ–æ–≥–∏—Ä—É–µ–º –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è video URL
      console.log(`üîÑ –•–æ—Ç—Å–ø–æ—Ç ${id} —Ç—Ä–µ–±—É–µ—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è videoUrl`);
      if (typeof hotspot._needsVideoRestore === 'string') {
        console.log(`üìÅ –û–∂–∏–¥–∞–µ–º—ã–π —Ñ–∞–π–ª: ${hotspot._needsVideoRestore}`);
      }
    }
    return hotspot;
  }

  findHotspotByMarkerId(markerId) {
    const hotspotId = markerId.replace('marker-', '');
    return this.findHotspotById(hotspotId);
  }

  getHotspotsForScene(sceneId) {
    console.log('üîç getHotspotsForScene –≤—ã–∑–≤–∞–Ω –¥–ª—è —Å—Ü–µ–Ω—ã:', sceneId);
    console.log('üîç –í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–∞—Ä–∫–µ—Ä—ã:', this.hotspots);

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ localStorage –ø—Ä–∏ –∫–∞–∂–¥–æ–º –∑–∞–ø—Ä–æ—Å–µ –¥–ª—è –∞–∫—Ç—É–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö
    this.loadFromStorage();

    const sceneHotspots = this.hotspots.filter(h => h.sceneId === sceneId);
    console.log('üîç –ù–∞–π–¥–µ–Ω–æ –º–∞—Ä–∫–µ—Ä–æ–≤ –¥–ª—è —Å—Ü–µ–Ω—ã', sceneId, ':', sceneHotspots.length);

    if (sceneHotspots.length === 0) {
      console.log('üìã –ú–∞—Ä–∫–µ—Ä—ã –¥—Ä—É–≥–∏—Ö —Å—Ü–µ–Ω:', this.hotspots.filter(h => h.sceneId !== sceneId));
    }

    return sceneHotspots;
  }

  loadHotspots(hotspotsData) {
    this.hotspots = hotspotsData || [];
    console.log('–ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ö–æ—Ç—Å–ø–æ—Ç–æ–≤:', this.hotspots.length);
  }

  getAllHotspots() {
    return this.hotspots;
  }

  updateAllMarkersWithSettings(settings) {
    this.hotspots.forEach(hotspot => {
      if (!hotspot.size) {
        hotspot.size = hotspot.type === 'hotspot' ? settings.hotspotSize : settings.infopointSize;
      }
      if (!hotspot.color) { // –ï—Å–ª–∏ —É —Ö–æ—Ç—Å–ø–æ—Ç–∞ –Ω–µ—Ç –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ —Ü–≤–µ—Ç–∞
        hotspot.color = hotspot.type === 'hotspot' ? settings.hotspotColor : settings.infopointColor;
        if (this.viewerManager) {
          this.viewerManager.updateVisualMarker(hotspot);
        }
      }
    });
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ–∫—É—â–∏–µ —Ö–æ—Ç—Å–ø–æ—Ç—ã –≤ localStorage
   */
  saveToStorage() {
    try {
      console.log('üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ö–æ—Ç—Å–ø–æ—Ç—ã:', this.hotspots.length);

      // –†–ê–î–ò–ö–ê–õ–¨–ù–ê–Ø –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      const hotspotsToSave = this.hotspots.map(hotspot => {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è
        const minimizedHotspot = {
          id: hotspot.id,
          sceneId: hotspot.sceneId,
          type: hotspot.type,
          position: hotspot.position
        };

        // –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä—ã —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ
        if (hotspot.width && hotspot.width !== 2) {
          minimizedHotspot.width = hotspot.width;
        }
        if (hotspot.height && hotspot.height !== 1.5) {
          minimizedHotspot.height = hotspot.height;
        }

        // –î–æ–±–∞–≤–ª—è–µ–º rotation —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –Ω–µ –Ω—É–ª–µ–≤–æ–π
        if (hotspot.rotation && (hotspot.rotation !== "0 0 0" && hotspot.rotation !== 0)) {
          minimizedHotspot.rotation = hotspot.rotation;
        }

        // –î–æ–±–∞–≤–ª—è–µ–º title —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å –∏ –Ω–µ –ø—É—Å—Ç–æ–π
        if (hotspot.title && hotspot.title.trim()) {
          minimizedHotspot.title = hotspot.title.substring(0, 50); // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
        }

        // –í–ê–ñ–ù–û: –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–ª–∏—á–∏–∏ videoUrl –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
        if (hotspot.videoUrl && hotspot.videoUrl.trim() !== '') {
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –∏–º—è —Ñ–∞–π–ª–∞ –∏–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã URL –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
          const urlParts = hotspot.videoUrl.split('/');
          const fileName = urlParts[urlParts.length - 1];
          if (fileName.length < 100) { // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ—Ä–æ—Ç–∫–∏–µ –∏–º–µ–Ω–∞ —Ñ–∞–π–ª–æ–≤
            minimizedHotspot.videoFileName = fileName;
          }
          minimizedHotspot.hasVideo = true;
        }

        // –ö–†–ò–¢–ò–ß–ù–û: –ù–ï –°–û–•–†–ê–ù–Ø–ï–ú videoUrl, data URLs, base64 –¥–∞–Ω–Ω—ã–µ –∏ –¥—Ä—É–≥–∏–µ –±–æ–ª—å—à–∏–µ –æ–±—ä–µ–∫—Ç—ã
        // –≠—Ç–∏ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
        const excludedFields = ['videoUrl', 'thumbnail', 'poster', 'src', 'href', 'data', 'content', 'blob'];

        // –§–∏–ª—å—Ç—Ä—É–µ–º –∏—Å–∫–ª—é—á–∞–µ–º—ã–µ –ø–æ–ª—è –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ö–æ—Ç—Å–ø–æ—Ç–∞
        const filteredHotspot = { ...hotspot };
        excludedFields.forEach(field => {
          if (filteredHotspot.hasOwnProperty(field)) {
            delete filteredHotspot[field];
            console.log(`üö´ –ò—Å–∫–ª—é—á–µ–Ω–æ –ø–æ–ª–µ: ${field} (—Ä–∞–∑–º–µ—Ä: ${JSON.stringify(hotspot[field] || '').length} —Å–∏–º–≤–æ–ª–æ–≤)`);
          }
        });

        // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ —Ä–∞–∑–º–µ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
        const originalSize = JSON.stringify(hotspot).length;
        const filteredSize = JSON.stringify(filteredHotspot).length;
        const optimizedSize = JSON.stringify(minimizedHotspot).length;
        const reduction = ((originalSize - optimizedSize) / originalSize * 100).toFixed(1);

        console.log(`üíæ –ú–∏–Ω–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ö–æ—Ç—Å–ø–æ—Ç: ${hotspot.id}`);
        console.log(`   –†–∞–∑–º–µ—Ä –¥–æ: ${originalSize} —Å–∏–º–≤–æ–ª–æ–≤`);
        console.log(`   –†–∞–∑–º–µ—Ä –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: ${filteredSize} —Å–∏–º–≤–æ–ª–æ–≤`);
        console.log(`   –†–∞–∑–º–µ—Ä –ø–æ—Å–ª–µ –º–∏–Ω–∏–º–∏–∑–∞—Ü–∏–∏: ${optimizedSize} —Å–∏–º–≤–æ–ª–æ–≤`);
        console.log(`   –û–±—â–µ–µ —Å–∂–∞—Ç–∏–µ: ${reduction}%`);

        return minimizedHotspot;
      });

      const dataToSave = JSON.stringify(hotspotsToSave);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö
      const sizeKB = (dataToSave.length / 1024).toFixed(2);
      console.log(`üíæ –†–∞–∑–º–µ—Ä –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: ${sizeKB} KB (–±—ã–ª–æ: 5653+ KB)`);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–∞–∑–º–µ—Ä –ø—Ä–∏–µ–º–ª–µ–º—ã–π (–º–µ–Ω–µ–µ 2MB)
      if (dataToSave.length > 2 * 1024 * 1024) {
        console.warn('‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –≤—Å–µ –µ—â–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∏–µ, –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è...');
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 —Ö–æ—Ç—Å–ø–æ—Ç–æ–≤
        const recentHotspots = hotspotsToSave.slice(-30);
        const reducedData = JSON.stringify(recentHotspots);
        console.log(`üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 —Ö–æ—Ç—Å–ø–æ—Ç–æ–≤: ${(reducedData.length / 1024).toFixed(2)} KB`);
        localStorage.setItem('color_tour_hotspots', reducedData);
      } else {
        localStorage.setItem('color_tour_hotspots', dataToSave);
      }

      console.log('üíæ –•–æ—Ç—Å–ø–æ—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ localStorage (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)');
    } catch (error) {
      if (error.name === 'QuotaExceededError') {
        console.error('‚ùå localStorage –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω! –ü—ã—Ç–∞–µ–º—Å—è —ç–∫—Å—Ç—Ä–µ–Ω–Ω—É—é –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é...');
        this.handleQuotaExceeded();
      } else {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ö–æ—Ç—Å–ø–æ—Ç–æ–≤:', error);
      }
    }
  }

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏–µ localStorage
   */
  handleQuotaExceeded() {
    try {
      console.log('‚ö†Ô∏è localStorage –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω, –≤—ã–ø–æ–ª–Ω—è–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é...');

      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—á–∏—â–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ localStorage
      localStorage.clear();
      console.log('üßπ localStorage –æ—á–∏—â–µ–Ω');

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 20 —Ö–æ—Ç—Å–ø–æ—Ç–æ–≤ –≤ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
      const recentHotspots = this.hotspots.slice(-20).map(hotspot => ({
        id: hotspot.id,
        sceneId: hotspot.sceneId,
        type: hotspot.type || 'video-area',
        position: hotspot.position,
        width: hotspot.width || 2,
        height: hotspot.height || 1.5
      }));

      const emergencyData = JSON.stringify(recentHotspots);
      console.log(`üÜò –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ ${recentHotspots.length} –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ö–æ—Ç—Å–ø–æ—Ç–æ–≤: ${(emergencyData.length / 1024).toFixed(2)} KB`);

      localStorage.setItem('color_tour_hotspots', emergencyData);
      console.log('üíæ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ');
    } catch (retryError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏:', retryError);
    }
  }

  /**
   * –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ö–æ—Ç—Å–ø–æ—Ç—ã –∏–∑ localStorage
   */
  loadFromStorage() {
    try {
      const stored = localStorage.getItem('color_tour_hotspots');
      if (stored) {
        this.hotspots = JSON.parse(stored);
        console.log('üì• –•–æ—Ç—Å–ø–æ—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ localStorage:', this.hotspots.length);

        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–Ω—ã–µ –ø–æ–ª—è –∏–∑ –ø–æ–ª–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Ö–æ—Ç—Å–ø–æ—Ç–æ–≤
        this.hotspots.forEach((hotspot, index) => {
          console.log(`üì• –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ö–æ—Ç—Å–ø–æ—Ç ${index + 1}: ${hotspot.id}`);
          console.log(`   –ü–æ–∑–∏—Ü–∏—è: ${JSON.stringify(hotspot.position)}`);

          // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–æ–ª—è –∏–∑ –ø–æ–ª–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –ø–∞–º—è—Ç–∏
          this.restoreHotspotData(hotspot);
        });

        return true;
      }
      return false;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ö–æ—Ç—Å–ø–æ—Ç–æ–≤:', error);
      return false;
    }
  }

  /**
   * –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–Ω—ã–µ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–æ–ª—è —Ö–æ—Ç—Å–ø–æ—Ç–∞
   */
  restoreHotspotData(hotspot) {
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø–æ–ª–µ–π
    if (!hotspot.width) hotspot.width = 2;
    if (!hotspot.height) hotspot.height = 1.5;
    if (!hotspot.rotation) hotspot.rotation = "0 0 0";
    if (!hotspot.type) hotspot.type = "video-area";

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å videoUrl
    if (hotspot.hasVideo && !hotspot.videoUrl) {
      if (hotspot.videoFileName) {
        // –ü–æ–º–µ—á–∞–µ–º –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ñ–∞–π–ª–µ
        hotspot._needsVideoRestore = hotspot.videoFileName;
        console.log(`‚ö†Ô∏è videoUrl –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –¥–ª—è —Ö–æ—Ç—Å–ø–æ—Ç–∞ ${hotspot.id} - —Ñ–∞–π–ª: ${hotspot.videoFileName}`);
      } else {
        hotspot._needsVideoRestore = true;
        console.log(`‚ö†Ô∏è videoUrl –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –¥–ª—è —Ö–æ—Ç—Å–ø–æ—Ç–∞ ${hotspot.id} - –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∫–∞`);
      }
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Ö–æ—Ç—Å–ø–æ—Ç —Å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –ø–æ–ª–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
   */
  getHotspotWithFullData(hotspotId) {
    const hotspot = this.findHotspotById(hotspotId);
    if (!hotspot) return null;

    // –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é —Ö–æ—Ç—Å–ø–æ—Ç–∞ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    const fullHotspot = { ...hotspot };

    // –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å videoUrl, –¥–µ–ª–∞–µ–º —ç—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
    if (fullHotspot._needsVideoRestore && !fullHotspot.videoUrl) {
      console.log(`üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ videoUrl –¥–ª—è ${hotspotId}`);

      // –ï—Å–ª–∏ –µ—Å—Ç—å –∏–º—è —Ñ–∞–π–ª–∞, –ª–æ–≥–∏—Ä—É–µ–º –µ–≥–æ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
      if (typeof fullHotspot._needsVideoRestore === 'string') {
        const fileName = fullHotspot._needsVideoRestore;
        console.log(`üìÅ –û–∂–∏–¥–∞–µ—Ç—Å—è —Ñ–∞–π–ª: ${fileName}`);
      }

      // –£–¥–∞–ª—è–µ–º —Ñ–ª–∞–≥ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
      delete fullHotspot._needsVideoRestore;
    }

    return fullHotspot;
  }

  /**
   * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤–∏–¥–µ–æ –±–µ–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –ø–æ–¥—Å–∫–∞–∑–æ–∫
   */
  promptForVideoRestore(hotspot, expectedFileName) {
    console.log(`üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–∏–¥–µ–æ –¥–ª—è ${hotspot.id}`);
    console.log(`üìÅ –û–∂–∏–¥–∞–µ–º—ã–π —Ñ–∞–π–ª: ${expectedFileName}`);

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–∫—Ä—ã–≤–∞–µ–º —Ä–µ–¥–∞–∫—Ç–æ—Ä –±–µ–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    this.editHotspot(hotspot.id);
  }

  /**
   * –û—á–∏—â–∞–µ—Ç –≤—Å–µ —Ö–æ—Ç—Å–ø–æ—Ç—ã
   */
  clearAll() {
    this.hotspots = [];
    localStorage.removeItem('color_tour_hotspots');
    if (this.viewerManager) {
      this.viewerManager.clearMarkers();
    }
    console.log('–í—Å–µ —Ö–æ—Ç—Å–ø–æ—Ç—ã –æ—á–∏—â–µ–Ω—ã');
  }

  /**
   * –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ localStorage (–≤—ã–∑—ã–≤–∞—Ç—å –≤ –∫–æ–Ω—Å–æ–ª–∏ –±—Ä–∞—É–∑–µ—Ä–∞)
   */
  static checkStorageSize() {
    let total = 0;
    const results = {};

    for (let key in localStorage) {
      if (localStorage.hasOwnProperty(key)) {
        const size = localStorage[key].length;
        total += size;
        results[key] = `${(size / 1024).toFixed(2)} KB`;
      }
    }

    console.log('üìä –ê–Ω–∞–ª–∏–∑ localStorage:');
    console.log(`üìè –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: ${(total / 1024).toFixed(2)} KB`);
    console.log('üìã –ü–æ –∫–ª—é—á–∞–º:', results);

    // –ü—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –ª–∏–º–∏—Ç–∞ (–æ–±—ã—á–Ω–æ 5-10 MB)
    const estimatedLimit = 5 * 1024 * 1024; // 5 MB –≤ –±–∞–π—Ç–∞—Ö
    const usage = (total / estimatedLimit * 100).toFixed(2);
    console.log(`‚ö° –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –ø—Ä–∏–º–µ—Ä–Ω–æ: ${usage}% –æ—Ç –ª–∏–º–∏—Ç–∞`);

    return { total, results, usage };
  }
}

// –î–æ–±–∞–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
window.checkStorageSize = HotspotManager.checkStorageSize;
